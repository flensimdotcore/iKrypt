#include "fsm.h"

int FSM_table[10][10];

bool OPENED_FLAG = 0;
int current_state = IDLE_STATE;
int current_signal = IDLE_SIGNAL;

void FSM_table_init() {
  FSM_table[LEFT_CRATE_STATE][RIGHT_CRATE_SIGNAL] = LEFT_CRATE_TO_RIGHT_CRATE_TRANSITION;
  FSM_table[LEFT_CRATE_STATE][TOP_CRATE_SIGNAL] = LEFT_CRATE_TO_TOP_CRATE_TRANSITION;
  FSM_table[LEFT_CRATE_STATE][BOTTOM_CRATE_SIGNAL] = LEFT_CRATE_TO_BOTTOM_CRATE_TRANSITION;
  FSM_table[RIGHT_CRATE_STATE][LEFT_CRATE_SIGNAL] = RIGHT_CRATE_TO_LEFT_CRATE_TRANSITION;
  FSM_table[RIGHT_CRATE_STATE][TOP_CRATE_SIGNAL] = RIGHT_CRATE_TO_TOP_CRATE_TRANSITION;
  FSM_table[RIGHT_CRATE_STATE][BOTTOM_CRATE_SIGNAL] = RIGHT_CRATE_TO_BOTTOM_CRATE_TRANSITION;
  FSM_table[TOP_CRATE_STATE][LEFT_CRATE_SIGNAL] = TOP_CRATE_TO_LEFT_CRATE_TRANSITION;
  FSM_table[TOP_CRATE_STATE][RIGHT_CRATE_SIGNAL] = TOP_CRATE_TO_RIGHT_CRATE_TRANSITION;
  FSM_table[TOP_CRATE_STATE][BOTTOM_CRATE_SIGNAL] = TOP_CRATE_TO_BOTTOM_CRATE_TRANSITION;
  FSM_table[BOTTOM_CRATE_STATE][LEFT_CRATE_SIGNAL] = BOTTOM_CRATE_TO_LEFT_CRATE_TRANSITION;
  FSM_table[BOTTOM_CRATE_STATE][RIGHT_CRATE_SIGNAL] = BOTTOM_CRATE_TO_RIGHT_CRATE_TRANSITION;
  FSM_table[BOTTOM_CRATE_STATE][TOP_CRATE_SIGNAL] = BOTTOM_CRATE_TO_TOP_CRATE_TRANSITION;

  FSM_table[LEFT_CRATE_STATE][EMPTY_CENTER_SIGNAL] = LEFT_CRATE_OUT_OF_CENTER_TRANSITION;
  FSM_table[RIGHT_CRATE_STATE][EMPTY_CENTER_SIGNAL] = RIGHT_CRATE_OUT_OF_CENTER_TRANSITION;
  FSM_table[TOP_CRATE_STATE][EMPTY_CENTER_SIGNAL] = TOP_CRATE_OUT_OF_CENTER_TRANSITION;
  FSM_table[BOTTOM_CRATE_STATE][EMPTY_CENTER_SIGNAL] = BOTTOM_CRATE_OUT_OF_CENTER_TRANSITION;

  FSM_table[EMPTY_CENTER_STATE][LEFT_CRATE_SIGNAL] = LEFT_CRATE_TO_CENTER_TRANSITION;
  FSM_table[EMPTY_CENTER_STATE][RIGHT_CRATE_SIGNAL] = RIGHT_CRATE_TO_CENTER_TRANSITION;
  FSM_table[EMPTY_CENTER_STATE][TOP_CRATE_SIGNAL] = TOP_CRATE_TO_CENTER_TRANSITION;
  FSM_table[EMPTY_CENTER_STATE][BOTTOM_CRATE_SIGNAL] = BOTTOM_CRATE_TO_CENTER_TRANSITION;
}

void FSM_classifier() {
  switch (input_buffer[0]) {
    case OPEN:
      current_signal = OPEN_SIGNAL;
      break;
    case LEFT_CRATE:
      current_signal = LEFT_CRATE_SIGNAL;
      break;
    case RIGHT_CRATE:
      current_signal = RIGHT_CRATE_SIGNAL;
      break;
    case TOP_CRATE:
      current_signal = TOP_CRATE_SIGNAL;
      break;
    case BOTTOM_CRATE:
      current_signal = BOTTOM_CRATE_SIGNAL;
      break;
    case EMPTY_CENTER:
      current_signal = EMPTY_CENTER_SIGNAL;
      break;
    case CLOSE:
      current_signal = CLOSE_SIGNAL;
      break;
  }

  if (!OPENED_FLAG && current_signal == OPEN_SIGNAL) {
    open_wall();
    open_door();
    Serial.println("Opened!");
    OPENED_FLAG = 1;
    current_state = EMPTY_CENTER_STATE;
  } else if (current_signal == CLOSE_SIGNAL && OPENED_FLAG) {
    close_door();
    close_wall();
    Serial.println("Closed!");
    OPENED_FLAG = 0;

    cycles_left = EEPROM[10];
    cycles_left--;
    EEPROM.update(10, cycles_left);
    Serial.print(cycles_left);
    Serial.println(" cycles left...");
  }

  motors_movement();
}